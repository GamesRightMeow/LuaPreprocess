Changelog
LuaPreprocess

v1.13.1 (2021-05-16)
Library:
- Dual code now supports multiple identifiers: !!x, y = ...
- Some non-ASCII characters in serialized strings look nicer.
- Added params.fastStrings .
- Fixed backtick strings not working in macros.
Command line program:
- Added --faststrings option.

v1.13 (2021-05-14)
Library:
- Added macros (in the form of '@insert func()' or '@@func()').
- Fixed processedFileInfo.hasPreprocessorCode being false even though @keywords were present.
- processedFileInfo.hasPreprocessorCode now means anything that isn't pure Lua.
- Added processedFileInfo.hasMetaprogram .
- Revised the whole error handling system. (Things should be more stable and nicer now.)
- Fixed errors getting printed to stdout instead of stderr.
Command line program:
- Fixed additional stack overflow error when there's an error in the "fileerror" message handler.


v1.12 (2021-01-25)
Library:
- Added support for LuaJIT-specific syntax.
- Output validation can be disabled with params.validate=false .
- Added aliases for some number formats.
- Fixed parsing of &, | and ~ operators.
Command line program:
- Added --jitsyntax and --novalidate options.

v1.11.2 (2021-01-05)
Library:
- Fixed parsing of numbers ending with a point.
Command line program:
- Added --backtickstrings and --nonil options (for specifying params.backtickStrings and params.canOutputNil).

v1.11.1 (2020-09-27)
Library:
- Huge numbers are now outputted as 1/0 instead of math.huge .
- Fixed newToken("pp_keyword",...) not accepting all preprocessor keywords.
- Better error message for unescaped newlines in string literals.

v1.11 (2020-03-23)
Library:
- Added params.onInsert() which can be used to change what @insert inserts.
- Added params.canOutputNil for disallowing !() and outputValue() from outputting nil.
- Added @file and @line keywords.
- Outputted strings now have more characters escaped.
- params.onAfterMeta() can now prepend shebang to the code without causing a code validation error.
- Fixed sometimes bad output when a preprocessor line ended with a comment.
- Fixed an internal error.
Command line program:
- Added message: "insert".

v1.10 (2019-09-25)
Library:
- Added the concept of preprocessor keywords in the form of @keyword.
- Added @insert.
- Added processedFileInfo.insertedFiles .

v1.9 (2019-08-02)
Library:
- run() can now send arguments to the executed file.
- Fixed issues when the last line in a file was a preprocessor line.
Command line program:
- Added --outputpaths option for specifying an output path for each input path.
- Added outputPaths argument to "init" message.
- Added processedFileInfo.outputPath .
- Added some short-form options.
- Updated byte units. (Now displaying KiB instead of kB etc.)

v1.8 (2019-05-25)
Library:
- Added functions: copyTable(), pack(), getCurrentPathIn(), getCurrentPathOut().
- Fixed an issue with whitespace after '!...'.
- Fixed tokenize() raising an error instead of returning the error message.
- Updated/fixed various other error handling stuff.
Command line program:
- Added --data option.
- The message handler can now be a table of functions.
- Added "fileerror" message.

v1.7 (2019-04-28)
- Hexadecimal fractions and binary exponents are now handled (e.g. 0x12a.8bP+2).
- Added missing token '::'.
- Added getNextUsefulToken().
- Dual code now only accepts a single assignment statement on the line.
- Updated detection of malformed numbers.
- Fixed internal error "error object is a nil value" in Lua 5.3.

v1.6 (2019-03-02)
- Added backtick strings.
- Added more functions for handling tokens (removeUselessTokens(), eachToken(), isToken()).
- Renamed the command line program (main.lua) to preprocess-cl.lua .

v1.5 (2019-02-22)
- Changed/improved '!!...'.
- Fixed an internal "trying to call nil" error.

v1.4 (2019-01-16)
- Added support for Lua 5.2 and 5.3.
- Fixed some error handling stuff.

v1.3.1 (2019-01-09)
- Fixed returned value from params.onAfterMeta() not getting used.

v1.3 (2019-01-05)
- Added processedFileInfo.linesOfCode to processFile()/processString().
- --saveinfo option now saves all info that processFile() returns for each file.
- Added concatTokens().

v1.2 (2019-01-03)
- Added pp.processString().

v1.1.1 (2019-01-02)
- (No info)

v1.1 (2018-12-22)
- (No info)

v1.0 (2018-11-02)
- Initial release.
